<div id="article_content" class="article_content">

<p>题目链接：<a target="_blank" target="_blank" href="http://acm.hdu.edu.cn/showproblem.php?pid=4712">HDU 4712</a><br>
</p>
<p>看评论里面很多人都是用随即算法过的&nbsp;&nbsp;&nbsp;&nbsp; 在这里贴一个非随即算法的解法</p>
<p><br>
</p>
<p>题意：给你n个(n&lt;=1e5)数a0~a(n-1)（ai&lt;(1&lt;&lt;20)）&nbsp;&nbsp; 要你求这n个数中转化为二进制后任意两个数中最小的汉明距离&nbsp;&nbsp;&nbsp; \\&nbsp; wiki百科：<a target="_blank" target="_blank" href="http://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB">汉明距离</a><br>
</p>
<p>例如：a0 = 00000000010000000000 &nbsp; a1 = 00000000000000000001 &nbsp; a2 = 00000000000000000011</p>
<p>则答案为1 ， 因为 a1^a2 = 00000000000000000010 其中1的个数为1，则答案为1</p>
<p><br>
</p>
<p>思路：</p>
<p>先说下随即算法的思路：首先当n比较小的时候，直接暴力枚举每两个数，求最小的汉明距离即可；当n比较大时，每次直接随即选出两个数a，b，求出汉明距离选取最小的即可。</p>
<p>因为ai&lt;(1&lt;&lt;20)，说明最终解一定&lt;=20，解的范围很小，所以随即算法成功的几率还是很高的。</p>

<p><br>
</p>
<p>接下来说说非随即算法（全是个人独立想出的哦<img alt="微笑" src="http://static.blog.csdn.net/xheditor/xheditor_emot/default/smile.gif">）</p>
<p>首先要利用汉明距离的一个性质，二进制字符串的汉明距离也等于 <em>n</em> 维超正方体两个顶点之间的曼哈顿距离，其中<em>n</em> 是两个字串的长度。</p>
<p>我们先令(a,b)表示二进制字符a，b的汉明距离！！</p>
<p>怎么解释那个性质呢，就是比如有a，b，c三个二进制字符，其中(a,b)==(b,c)==1，那么(a,c) = (a,b)&#43;(b,c) = 2<br>
</p>
<p>再加入一个d，假设(c,d)==1，且(d,a)!=1且(d,b)!=1，那么(d,a) = (a,b)&#43;(b,c)&#43;(c,d) = 3; (d,b) = (b,c)&#43;(c,d) = 2;</p>
<p>（对于这个性质我一开始也是猜测，然后写了个小程序简单验证了一下，再后来仔细看汉明距离的wiki百科的时候才发现上面写着有。。。</p>
<p>怪不得题目上面一开始就表明了(From WIKI)。。。&nbsp; ）</p>
<p><br>
</p>
<p></p>
<p>有了这个性质接下来的事情就比较简单了</p>
<p>因为a&lt;(1&lt;&lt;20)，所以先把这(1&lt;&lt;20)个数当成(1&lt;&lt;20)个结点，然后把其汉明距离为1的结点连接起来，把边的长度设为1，</p>
<p>这样两个数的汉明距离即为这个图上两点间的最短路长度</p>
<p>如此一来，我们就可以把给出的n个数当成n个起点，然后在图上进行搜索，搜出任意两起点间最短的距离</p>
<p>搜索的方法就类&#20284;于多向BFS，具体的实现见代码</p>
<p>PS：多向BFS在搜索时，搜索到一个解并不能马上返回，需要把当前这一层的结点搜索完毕，然后返回一个最优&#20540;</p>
<p>比如下面这个图</p>
<p>可以尝试模拟一下，其中1，2，3表示搜索起点，当搜索到4号结点的时候，如果先行搜索红色边的话，则返回&#20540;是4，而正确解应该是3<br>
</p>
<p><img src="http://img.blog.csdn.net/20130910131331718" alt="" height="336" width="683"></p>
<p><br>
</p>
<p><br>
</p>
<p>下面贴代码</p>
<p><pre name="code" class="cpp">#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;fstream&gt;
#include &lt;algorithm&gt;
#include &lt;stack&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
using namespace std;

#define REP(i,n) for(int i=0;i&lt;(n);i++)
#define FOR(i,j,k) for(int i=j;i&lt;=(k);i++)
#define ll long long
#define base 20
#define maxn (1&lt;&lt;base)+10
/*
ifstream fin(&quot;1&quot;);
#define cin fin
*/
int a[100009],n;


int Hash(char c){
    if(c&gt;='0'&amp;&amp;c&lt;='9')  return c-'0';
    return 10+c-'A';
}
void Input(int k){
    char s[7];
    cin &gt;&gt; s;
    int st = 0;
    REP(i,5) {
        st *= 16;
        st += Hash(s[i]);
    }
    a[k] = st;
}

int dis[maxn],color[maxn];//dis表示距离，color相当于把从每个起点开始的搜索路径染色
queue &lt;int&gt; q;
int Solve(){
    while(!q.empty())   q.pop();
    memset(color,-1,sizeof(color));
    memset(dis,-1,sizeof(dis));
    REP(i,n){
        if(dis[a[i]] != -1) return 0;
        dis[a[i]] = 0;
        color[a[i]] = i;
        q.push(a[i]);
    }
    int ans = 2e9,floor = 2e9;  // ans 是答案 floor表示的是限定得到解的层数
    while(!q.empty()){
        int u = q.front(); q.pop();
        REP(i,base){
            int v = (u^(1&lt;&lt;i));
            if(dis[v] == -1){
                dis[v] = dis[u] + 1;
                color[v] = color[u];
                // 只有当v的层数小于floor 才将其加入待搜队列
                if(dis[v] &lt;= floor) q.push(v);
            }
            else if(dis[v] != -1){
                if(color[v] == color[u])    continue; // 颜色相同则直接忽略
            //    return dis[v]+dis[u]+1;   直接返回是错误的！！！
                ans = min(ans,dis[v]+dis[u]+1);
                floor = min(floor,dis[u]);
            }
        }
    }
    return ans;
}

int main(){
    int test;
    cin &gt;&gt; test;
    while(test --){
        cin &gt;&gt; n;
        memset(a,-1,sizeof(a));
        REP(i,n)    Input(i);
        cout &lt;&lt; Solve() &lt;&lt; endl;
    }
}
</pre><br>
<br>
</p>
</div>

